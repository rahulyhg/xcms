<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function node_menu() {

  $items['node'] = array(
    'title' => 'Node',
    'callback' => 'node_page',
    'file' => 'core/modules/node/node.pages.inc',
    'access' => TRUE,
  );

  $items['node/%'] = array(
    'title' => 'View',
    'callback' => 'node_page',
    'file' => 'core/modules/node/node.pages.inc',
    'access' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%/edit'] = array(
    'title' => 'Edit',
    'callback' => 'node_form_page',
    'file' => 'core/modules/node/node.pages.inc',
    'access' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/add/%'] = array(
    'title' => 'Add node',
    'callback' => 'node_form_page',
    'file' => 'core/modules/node/node.pages.inc',
    'access' => 'user_is_logged_in',
  );

  $items['admin/node'] = array(
    'title' => 'Content',
    'callback' => 'node_admin_page',
    'file' => 'core/modules/node/node.admin.inc',
    'access' => 'user_is_admin',
    'weight' => -1,
  );

  return $items;
}

/**
 * Loads a node object.
 */
function node_load($nid) {
  $node = db_query('SELECT * FROM node WHERE nid = :nid', array(':nid' => $nid))->fetchObject();
  if ($node) {
    $node->data = unserialize($node->data);
    xcms_modules_invoke('node_load', $node);
    // xsm($node);
    return $node;
  }
  return FALSE;
}

/**
 * Save changes to a node or add a new node.
 */
function node_save(&$node) {

  $args = array(':title' => $node->title, ':data' => serialize($node->data));

  // new node (INSERT) get a nid
  if (empty($node->nid)) {
    $args[':type'] = $node->type;
    $args[':created'] = time();
    $node->nid = db_query('INSERT INTO node (type, title, created, data) VALUES (:type, :title, :created, :data)', $args);
  }

  // edit node (UPDATE)
  else {
    $args[':nid'] = $node->nid;
    db_query('UPDATE node SET title = :title, data = :data WHERE nid = :nid', $args);
  }

  xcms_modules_invoke('node_save', $node);
}

/**
 * Implements node_node_load().
 */
function node_node_load($node) {
  $node->data['path'] = db_query('SELECT alias FROM paths WHERE path = :path', array(':path' => 'node/' . $node->nid))->fetchColumn();
}

/**
 * Implements hook_node_save().
 */
function node_node_save($node) {
  // Update path alias.
  if (empty($node->data['path'])) {
    db_query('DELETE FROM paths WHERE path = :path', array(':path' => 'node/' . $node->nid));
  }
  else {
    // Check for existing path.
    $result = db_query('SELECT count(alias) FROM paths WHERE alias = :alias', array(':alias' => $node->data['path']))->fetchColumn();
    $args = array(':path' => 'node/' . $node->nid, ':alias' => $node->data['path']);
    if ($result) {
      db_query('UPDATE paths SET alias = :alias WHERE path = :path', $args);
    }
    else {
      db_query('INSERT INTO paths (path, alias) VALUES (:path, :alias)', $args);
    }
  }
}

