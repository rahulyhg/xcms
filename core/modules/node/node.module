<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function node_menu() {

  $items['node'] = array(
    'title' => 'Node',
    'callback' => 'node_page',
    'file' => 'core/modules/node/node.pages.inc',
    'access' => TRUE,
  );

  $items['node/%'] = array(
    'title' => 'View',
    'callback' => 'node_page',
    'file' => 'core/modules/node/node.pages.inc',
    'access' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%/edit'] = array(
    'title' => 'Edit',
    'callback' => 'xcms_get_form',
    'arguments' => array('node_form'),
    'file' => 'core/modules/node/node.pages.inc',
    'access' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/add/%'] = array(
    'title' => 'Add',
    'callback' => 'xcms_get_form',
    'arguments' => array('node_form'),
    'file' => 'core/modules/node/node.pages.inc',
    'access' => 'user_is_logged_in',
  );

  $items['admin/node'] = array(
    'title' => 'Content',
    'callback' => 'node_admin_page',
    'file' => 'core/modules/node/node.admin.inc',
    'access' => 'user_is_admin',
    'weight' => -1,
  );

  return $items;
}

/**
 * Loads a list of node types.
 */
function node_get_types() {
  $node_types = &xcms_static(__FUNCTION__);
  if (!isset($node_types)) {
    $node_types = xcms_modules_invoke('node_types');
  }

  $node_type_defaults = array(
    'title' => '',
    'weight' => 0,
    'fields' => array(),
  );

  foreach ($node_types as $type => $structure) {
    $node_types[$type] += $node_type_defaults;
  }

  uasort($node_types, 'xcms_weight_sort');

  return $node_types;
}

/**
 * Get the structure of a node type.
 */
function node_get_type_structure($type) {
  $node_types = node_get_types();
  return isset($node_types[$type]) ? $node_types[$type] : FALSE;
}

/**
 * Get the structure of a node type.
 */
function node_get_type_fields($type) {
  $structure = node_get_type_structure($type);
  return $structure['fields'];
}

/**
 * Implements hook_node_types().
 */
function node_node_types() {
  return array(
    'page' => array(
      'title' => 'Page',
      'fields' => array('field_body'),
    ),
  );
}

/**
 * Implements hook_field_*().
 */
function node_field_body($node) {
  $form['field_body'] = array(
    'type' => 'textarea',
    'title' => 'Body',
    'default_value' => issetor($node->data['field_body']),
    'attributes' => array(
      'rows' => 10,
      'class' => array('cke'),
    ),
  );
  return $form;
}

/**
 * Loads a node object.
 */
function node_load($nid) {
  $node = db_query('SELECT * FROM node WHERE nid = :nid', array(':nid' => $nid))->fetchObject();
  if ($node) {
    $node->data = unserialize($node->data);
    xcms_modules_invoke('node_load', $node);
    return $node;
  }
  return FALSE;
}

/**
 * Save changes to a node or add a new node.
 */
function node_save(&$node) {
  global $xcms_db;
  $args = array(':title' => $node->title, ':data' => serialize($node->data));
  if (empty($node->nid)) {
    $args[':type'] = $node->type;
    $args[':created'] = time();
    db_query('INSERT INTO node (type, title, created, data) VALUES (:type, :title, :created, :data)', $args);
    $node->nid = $xcms_db->lastInsertId();
  }
  else {
    $args[':nid'] = $node->nid;
    db_query('UPDATE node SET title = :title, data = :data WHERE nid = :nid', $args);
  }
  xcms_modules_invoke('node_save', $node);
}

/**
 * Implements node_node_load().
 */
function node_node_load($node) {
  $node->path = db_query('SELECT alias FROM paths WHERE path = :path', array(':path' => 'node/' . $node->nid))->fetchColumn();
}

/**
 * Implements hook_node_save().
 */
function node_node_save($node) {
  $node->path = trim($node->path);

  // Update path alias.
  if (empty($node->path)) {
    db_query('DELETE FROM paths WHERE path = :path', array(':path' => 'node/' . $node->nid));
  }
  else {
    // Check for existing path.
    $result = db_query('SELECT count(path) FROM paths WHERE path = :path', array(':path' => 'node/' . $node->nid))->fetchColumn();
    $args = array(':path' => 'node/' . $node->nid, ':alias' => $node->path);

    if ($result) {
      db_query('UPDATE paths SET alias = :alias WHERE path = :path', $args);
    }
    else {
      db_query('INSERT INTO paths (path, alias) VALUES (:path, :alias)', $args);
    }
  }

  // Update field_*
  // TODO store field data in table, node type info etc.
}

